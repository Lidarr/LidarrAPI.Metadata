# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- develop

pr:
- master
- develop

variables:
  majorVersion: '0.4'
  minorVersion: $[counter('minorVersion', 29)]
  lidarrVersion: '$(majorVersion).$(minorVersion)'
  buildName: '$(Build.SourceBranchName).$(lidarrVersion)'
  imageName: 'lidarr/lidarrapi.metadata'
  sentryOrg: 'servarr'
  sentryUrl: 'https://sentry.servarr.com'

jobs:
  - job:
    displayName: Build

    pool:
      vmImage: 'Ubuntu-20.04'

    steps:
    - powershell: Write-Host "##vso[build.updatebuildnumber]$($env:LIDARRVERSION)"
      displayName: 'Set Build Name'

    - bash: sed -i'' -e "s/10.0.0.0/$LIDARRVERSION/g" lidarrmetadata/__init__.py
      displayName: 'Set Code Version'

    - task: UsePythonVersion@0
      displayName: 'Set Python Version 3.9'
      inputs:
        versionSpec: '3.9'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'lidarr'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'lidarr_LidarrAPI.Metadata'
        cliProjectName: 'LidarrAPI.Metadata'
        cliProjectVersion: $(lidarrVersion)
        cliSources: 'lidarrmetadata'
        extraProperties: |
          sonar.python.coverage.reportPath=$(System.DefaultWorkingDirectory)/coverage.xml

    - script: python -m pip install -U -Iv pypandoc==1.5 tox==3.23.0
      displayName: 'Install tools'

    - script: tox -e py39
      displayName: 'Run Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Linux - Python 3.9'
      condition: succeededOrFailed()

    - publish: $(System.DefaultWorkingDirectory)/htmlcov
      artifact: 'PyTestCoverageReport'
      displayName: Publish PyTest Coverage Report
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
      condition: succeededOrFailed()

    - task: SonarCloudAnalyze@1
      displayName: 'Run Sonarcloud Analysis'

    - task: Docker@2
      displayName: Build image
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
      inputs:
        command: build
        Dockerfile: Dockerfile
        arguments: --build-arg GIT_BRANCH=$(Build.SourceBranchName) --build-arg COMMIT_HASH=$(Build.SourceVersion) -t ghcr.io/$(imageName):latest -t ghcr.io/$(imageName):$(Build.SourceBranchName)

    - task: Docker@2
      displayName: Push image
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
      inputs:
        containerRegistry: 'ghcr'
        repository: $(imageName)
        command: push
        tags: |
          latest
          $(Build.SourceBranchName)

    - bash: |
        echo "Creating sentry release"
        SENTRYRELEASE="lidarr-metadata-${LIDARRVERSION}"
        curl -sL https://sentry.io/get-cli/ | bash
        sentry-cli releases new --finalize -p lidarr-metadata "${SENTRYRELEASE}"
        sentry-cli releases set-commits --auto "${SENTRYRELEASE}"
        sentry-cli releases deploys "${SENTRYRELEASE}" new -e production
      displayName: Create sentry release
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['system.pullrequest.isfork'], false))
      env:
        SENTRY_AUTH_TOKEN: $(sentryAuthTokenServarr)
        SENTRY_ORG: $(sentryOrg)
        SENTRY_URL: $(sentryUrl)
